apiVersion: v1
kind: BuildConfig
metadata:
  name: bluegreen-pipeline
  namespace: bluegreen-mcb
  selfLink: /oapi/v1/namespaces/bluegreen-mcb/buildconfigs/bluegreen-pipeline
  uid: 3c3aa5a9-71e9-11e7-aecc-525400a1ff71
  resourceVersion: '4277'
  creationTimestamp: '2017-07-26T10:00:20Z'
  labels:
    app: bluegreen-pipeline
    name: bluegreen-pipeline
  annotations:
    pipeline.alpha.openshift.io/uses: '[{"name": "bluegreen", "namespace": "", "kind": "DeploymentConfig"}]'
spec:
  triggers:
    - type: GitHub
      github:
        secret: secret101
    - type: Generic
      generic:
        secret: secret101
  runPolicy: Serial
  source:
    type: None
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |
        #!groovy
        def appName="main"
        def tag="blue"
        def altTag="green"        

        node {
          def project = getProjectName()
          
          stage("Initialize") {
            sh "oc get route ${appName} -n ${project} -o jsonpath='{ .spec.to.name }' > activeservice"
            activeService = readFile('activeservice').trim()
            if (activeService == "blue") {
              tag = "green"
              altTag = "blue"
            }
            sh "oc get route ${tag} -n ${project} -o jsonpath='{ .spec.host }' > routehost"
            routeHost = readFile('routehost').trim()
          }

          stage("Build") {
            echo "building tag ${tag}"
            openshiftBuild buildConfig: "${tag}", showBuildLogs: "true"
          }

          stage("Deploy Test") {
            openshiftTag srcStream: "${tag}", srcTag: 'latest', destinationStream: "${tag}", destinationTag: 'latest'
            openshiftVerifyDeployment deploymentConfig: "${tag}"
          }

          stage("Test") {
            input message: "New build is ready, would you like to test the new ${tag} deployment  ?", id: "approval"
          }

          stage("Go Live") {
            def patch1 = $/oc patch route/main -p $'{\"spec\":{\"to\":{\"name\":\"${tag}\"}}}$' -n ${project}/$
            sh patch1
          }

          stage("Rollback") {
            sh "oc get route ${altTag} -n ${project} -o jsonpath='{ .spec.host }' > routehost"
            routeHost = readFile('routehost').trim()
            def patch2 = $/oc patch route/main -p $'{\"spec\":{\"to\":{\"name\":\"${altTag}\"}}}$' -n ${project}/$            
            try {
              input message: "Would you like to rollback the deployment to ${altTag}. ?", id: "approval"
              echo "rolling back to ${tag}"
              sh patch2
            } catch (error) {
              echo "rollback aborted"
            }
          }
        }

        def getProjectName(){
            def cmd1 = $/project=$(oc get project -o name);echo $${project##project*/} > projectName/$
            sh cmd1
            name = readFile('projectName').trim()
            sh 'rm projectName'
            return name
        }
  output: {}
  resources: {}
  postCommit: {}
  nodeSelector: null
status:
  lastVersion: 0
